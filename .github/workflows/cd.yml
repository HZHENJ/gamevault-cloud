# ==========================================
# CD Workflow - Build Docker Images and Deploy to EC2
# For GameVault Cloud Microservices
# Deployment Method: Docker Compose
# ==========================================

name: "CD - Build and Deploy to EC2"

on:
  push:
    branches: [prod/master_no_k8s]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_TAG: latest

jobs:
  build-and-push:
    environment: production
    runs-on: ubuntu-latest
    name: Build and Push Docker Images
    strategy:
      fail-fast: false
      matrix:
        service:
          - gamevault-gateway
          - gamevault-auth
          - gamevault-shopping
          - gamevault-forum
          - gamevault-developer
          - gamevault-social

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package -DskipTests -B

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
          cache-to: type=inline

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: Deploy to EC2 via Docker Compose
    if: github.ref == 'refs/heads/prod/master_no_k8s'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Initialize EC2 environment
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Initializing deployment environment..."
          
            # 检查 Docker 是否安装
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              rm get-docker.sh
            fi
          
            # 检查 Docker Compose 是否安装
            if ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi
          
            echo "Docker and Docker Compose are ready"
          EOF

      - name: Create directory structure
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Creating directory structure..."
          
            mkdir -p ~/gamevault-cloud/docker/postgres/data
            mkdir -p ~/gamevault-cloud/docker/postgres/init
            mkdir -p ~/gamevault-cloud/docker/nacos/logs
            mkdir -p ~/gamevault-cloud/docker/nacos/data
            mkdir -p ~/gamevault-cloud/docker/redis/data
            mkdir -p ~/gamevault-cloud/docker/minio/data
            mkdir -p ~/gamevault-cloud/docker/minio/config
            mkdir -p ~/gamevault-cloud/docker/uploads
          
            sudo chmod -R 755 ~/gamevault-cloud/docker
          
            echo "Directory structure created"
          EOF

      - name: Create Redis config
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if [ ! -f ~/gamevault-cloud/docker/redis/redis.conf ]; then
              echo "Creating Redis configuration..."
              cat > ~/gamevault-cloud/docker/redis/redis.conf << 'REDIS_EOF'
          bind 0.0.0.0
          protected-mode no
          port 6379
          tcp-backlog 511
          timeout 0
          tcp-keepalive 300
          daemonize no
          supervised no
          pidfile /var/run/redis_6379.pid
          loglevel notice
          databases 16
          save 900 1
          save 300 10
          save 60 10000
          stop-writes-on-bgsave-error yes
          rdbcompression yes
          rdbchecksum yes
          dbfilename dump.rdb
          dir /data
          maxmemory 256mb
          maxmemory-policy allkeys-lru
          REDIS_EOF
              echo "Redis config created"
            fi
          EOF

      - name: Create database init script
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if [ ! -f ~/gamevault-cloud/docker/postgres/init/01-init-databases.sql ]; then
              echo "Creating database initialization script..."
              cat > ~/gamevault-cloud/docker/postgres/init/01-init-databases.sql << 'SQL_EOF'
          -- 创建各个服务的数据库
          CREATE DATABASE gamevault_auth;
          CREATE DATABASE gamevault_social;
          CREATE DATABASE gamevault_shopping;
          CREATE DATABASE gamevault_forum;
          CREATE DATABASE gamevault_developer;
          
          -- 授权
          GRANT ALL PRIVILEGES ON DATABASE gamevault_auth TO gamevault_user;
          GRANT ALL PRIVILEGES ON DATABASE gamevault_social TO gamevault_user;
          GRANT ALL PRIVILEGES ON DATABASE gamevault_shopping TO gamevault_user;
          GRANT ALL PRIVILEGES ON DATABASE gamevault_forum TO gamevault_user;
          GRANT ALL PRIVILEGES ON DATABASE gamevault_developer TO gamevault_user;
          SQL_EOF
              echo "Database init script created"
            fi
          EOF

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -i ~/.ssh/ec2_key docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/gamevault-cloud/

      - name: Deploy on EC2
        run: |
          ssh -i ~/.ssh/ec2_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/gamevault-cloud

            echo "Creating .env file for docker-compose..."
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
            echo "IMAGE_TAG=latest" >> .env
            echo "EC2_PUBLIC_IP=52.77.169.8" >> .env
  
            echo "Pulling latest images..."
            sudo docker compose pull
            
            echo "Stopping old containers..."
            sudo docker compose down
            
            echo "Starting services..."
            sudo docker compose up -d
            
            echo "Waiting for services..."
            sleep 30
            
            echo "Deployment complete!"
            sudo docker compose ps 
          EOF

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/ec2_key