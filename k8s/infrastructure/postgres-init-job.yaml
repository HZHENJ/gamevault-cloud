apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-init
  namespace: gamevault
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-postgres
          image: postgres:16
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -U gamevault_user; do
                echo "Waiting for PostgreSQL..."
                sleep 3
              done
              echo "PostgreSQL is ready!"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD

      containers:
        - name: init-databases
          image: postgres:16
          command:
            - sh
            - -c
            - |
              set -e
              
              echo "=========================================="
              echo "Step 1: Creating databases..."
              echo "=========================================="
              
              PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U gamevault_user -d postgres <<'EOSQL'
              -- 创建各个服务的数据库
              SELECT 'CREATE DATABASE gamevault_auth' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'gamevault_auth')\gexec
              SELECT 'CREATE DATABASE gamevault_social' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'gamevault_social')\gexec
              SELECT 'CREATE DATABASE gamevault_shopping' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'gamevault_shopping')\gexec
              SELECT 'CREATE DATABASE gamevault_forum' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'gamevault_forum')\gexec
              SELECT 'CREATE DATABASE gamevault_developer' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'gamevault_developer')\gexec
              
              -- 授权
              GRANT ALL PRIVILEGES ON DATABASE gamevault_auth TO gamevault_user;
              GRANT ALL PRIVILEGES ON DATABASE gamevault_social TO gamevault_user;
              GRANT ALL PRIVILEGES ON DATABASE gamevault_shopping TO gamevault_user;
              GRANT ALL PRIVILEGES ON DATABASE gamevault_forum TO gamevault_user;
              GRANT ALL PRIVILEGES ON DATABASE gamevault_developer TO gamevault_user;
              EOSQL
              
              echo "[OK] Databases created successfully!"
              
              echo ""
              echo "=========================================="
              echo "Step 2: Creating Developer tables..."
              echo "=========================================="
              
              PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U gamevault_user -d gamevault_developer <<'EOSQL'
              -- Developer Profile 表
              CREATE TABLE IF NOT EXISTS developer_profile (
                  id VARCHAR(64) PRIMARY KEY,
                  user_id VARCHAR(64) NOT NULL UNIQUE,
                  project_count INT NOT NULL DEFAULT 0
              );
              
              -- Dev Game 主表
              CREATE TABLE IF NOT EXISTS dev_game (
                  id VARCHAR(64) PRIMARY KEY,
                  developer_profile_id VARCHAR(64) NOT NULL REFERENCES developer_profile(id),
                  name VARCHAR(100) NOT NULL,
                  description VARCHAR(1000) NOT NULL,
                  release_date TIMESTAMP,
                  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
                  updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
                  CONSTRAINT uk_developer_game_name UNIQUE (developer_profile_id, name)
              );
              
              CREATE INDEX IF NOT EXISTS idx_dev_game_developer ON dev_game (developer_profile_id);
              
              -- Dev Game Asset 资源表
              CREATE TABLE IF NOT EXISTS dev_game_asset (
                  id VARCHAR(64) PRIMARY KEY,
                  dev_game_id VARCHAR(64) NOT NULL REFERENCES dev_game(id) ON DELETE CASCADE,
                  asset_type VARCHAR(50) NOT NULL,
                  file_name VARCHAR(200) NOT NULL,
                  storage_path VARCHAR(500) NOT NULL,
                  file_size BIGINT NOT NULL CHECK (file_size > 0),
                  mime_type VARCHAR(50),
                  uploaded_at TIMESTAMP NOT NULL DEFAULT NOW()
              );
              
              CREATE INDEX IF NOT EXISTS idx_dev_game_asset_game_type ON dev_game_asset (dev_game_id, asset_type);
              
              -- Dev Game Statistics 统计表
              CREATE TABLE IF NOT EXISTS dev_game_statistics (
                  id VARCHAR(64) PRIMARY KEY,
                  game_id VARCHAR(64) NOT NULL UNIQUE REFERENCES dev_game(id),
                  view_count INT DEFAULT 0,
                  download_count INT DEFAULT 0,
                  rating DOUBLE PRECISION DEFAULT 0,
                  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
              EOSQL
              
              echo "[OK] Developer tables created successfully!"
              
              echo ""
              echo "=========================================="
              echo "Step 3: Creating Forum tables..."
              echo "=========================================="
              
              PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U gamevault_user -d gamevault_forum <<'EOSQL'
              -- 设置基本配置
              SET timezone = 'Asia/Singapore';
              SET client_encoding = 'UTF8';
              
              -- 内容表
              CREATE TABLE IF NOT EXISTS contents (
                  content_id BIGSERIAL PRIMARY KEY,
                  content_type VARCHAR(20) NOT NULL,
                  title VARCHAR(200),
                  body TEXT NOT NULL,
                  body_plain TEXT NOT NULL,
                  author_id BIGINT NOT NULL,
                  parent_id BIGINT,
                  reply_to BIGINT,
                  status VARCHAR(20) DEFAULT 'active',
                  created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  CONSTRAINT fk_contents_parent FOREIGN KEY (parent_id) REFERENCES contents(content_id) ON DELETE CASCADE,
                  CONSTRAINT fk_contents_reply_to FOREIGN KEY (reply_to) REFERENCES contents(content_id) ON DELETE SET NULL
              );
              
              -- 属性定义表
              CREATE TABLE IF NOT EXISTS attribute_definitions (
                  attr_id SERIAL PRIMARY KEY,
                  attr_name VARCHAR(50) UNIQUE NOT NULL,
                  attr_type VARCHAR(20) NOT NULL,
                  description TEXT,
                  is_required BOOLEAN DEFAULT false,
                  default_value TEXT,
                  created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
              
              -- 内容属性表
              CREATE TABLE IF NOT EXISTS content_attributes (
                  id SERIAL PRIMARY KEY,
                  content_id BIGINT,
                  attr_id INTEGER,
                  attr_value TEXT,
                  created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  CONSTRAINT fk_content_attrs_content FOREIGN KEY (content_id) REFERENCES contents(content_id) ON DELETE CASCADE,
                  CONSTRAINT fk_content_attrs_attr FOREIGN KEY (attr_id) REFERENCES attribute_definitions(attr_id) ON DELETE CASCADE,
                  UNIQUE(content_id, attr_id)
              );
              
              -- 统计类型定义
              CREATE TABLE IF NOT EXISTS metric_definitions (
                  metric_id SERIAL PRIMARY KEY,
                  metric_name VARCHAR(50) UNIQUE NOT NULL,
                  metric_type VARCHAR(20) NOT NULL,
                  description TEXT,
                  created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
              
              -- 内容统计表
              CREATE TABLE IF NOT EXISTS content_metrics (
                  id SERIAL PRIMARY KEY,
                  content_id BIGINT,
                  metric_id INTEGER,
                  metric_value INTEGER DEFAULT 0,
                  updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  CONSTRAINT fk_content_metrics_content FOREIGN KEY (content_id) REFERENCES contents(content_id) ON DELETE CASCADE,
                  CONSTRAINT fk_content_metrics_metric FOREIGN KEY (metric_id) REFERENCES metric_definitions(metric_id) ON DELETE CASCADE,
                  UNIQUE(content_id, metric_id)
              );
              
              -- 关系类型定义
              CREATE TABLE IF NOT EXISTS relationship_types (
                  type_id SERIAL PRIMARY KEY,
                  type_name VARCHAR(50) UNIQUE NOT NULL,
                  description TEXT,
                  created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
              
              -- 用户-内容关系表
              CREATE TABLE IF NOT EXISTS user_content_relations (
                  id SERIAL PRIMARY KEY,
                  user_id BIGINT,
                  content_id BIGINT,
                  relation_type_id INTEGER,
                  created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  CONSTRAINT fk_ucr_content FOREIGN KEY (content_id) REFERENCES contents(content_id) ON DELETE CASCADE,
                  CONSTRAINT fk_ucr_type FOREIGN KEY (relation_type_id) REFERENCES relationship_types(type_id) ON DELETE CASCADE,
                  UNIQUE(user_id, content_id, relation_type_id)
              );
              
              -- 创建索引
              CREATE INDEX IF NOT EXISTS idx_contents_type ON contents(content_type);
              CREATE INDEX IF NOT EXISTS idx_contents_author ON contents(author_id);
              CREATE INDEX IF NOT EXISTS idx_contents_parent ON contents(parent_id);
              CREATE INDEX IF NOT EXISTS idx_contents_status ON contents(status);
              CREATE INDEX IF NOT EXISTS idx_contents_created ON contents(created_date DESC);
              CREATE INDEX IF NOT EXISTS idx_contents_type_status ON contents(content_type, status);
              CREATE INDEX IF NOT EXISTS idx_contents_reply_to ON contents(reply_to);
              CREATE INDEX IF NOT EXISTS idx_content_attrs_content ON content_attributes(content_id);
              CREATE INDEX IF NOT EXISTS idx_content_attrs_attr ON content_attributes(attr_id);
              CREATE INDEX IF NOT EXISTS idx_content_metrics_content ON content_metrics(content_id);
              CREATE INDEX IF NOT EXISTS idx_content_metrics_metric ON content_metrics(metric_id);
              CREATE INDEX IF NOT EXISTS idx_relations_user ON user_content_relations(user_id);
              CREATE INDEX IF NOT EXISTS idx_relations_content ON user_content_relations(content_id);
              CREATE INDEX IF NOT EXISTS idx_relations_type ON user_content_relations(relation_type_id);
              
              -- 初始化属性定义
              INSERT INTO attribute_definitions (attr_name, attr_type, description, is_required) VALUES
                  ('category', 'string', '帖子分类', false),
                  ('forum', 'string', '所属论坛', false),
                  ('tags', 'json', '标签列表', false),
                  ('priority', 'integer', '优先级', false),
                  ('is_pinned', 'boolean', '是否置顶', false),
                  ('is_locked', 'boolean', '是否锁定', false),
                  ('game_title', 'string', '相关游戏名称', false),
                  ('difficulty_level', 'integer', '难度等级', false),
                  ('platform', 'string', '游戏平台', false)
              ON CONFLICT (attr_name) DO NOTHING;
              
              -- 初始化统计类型
              INSERT INTO metric_definitions (metric_name, metric_type, description) VALUES
                  ('view_count', 'counter', '浏览次数'),
                  ('like_count', 'counter', '点赞数量'),
                  ('reply_count', 'counter', '回复数量'),
                  ('share_count', 'counter', '分享次数'),
                  ('bookmark_count', 'counter', '收藏次数'),
                  ('report_count', 'counter', '举报次数'),
                  ('score', 'score', '综合评分')
              ON CONFLICT (metric_name) DO NOTHING;
              
              -- 初始化关系类型
              INSERT INTO relationship_types (type_name, description) VALUES
                  ('like', '用户点赞内容'),
                  ('bookmark', '用户收藏内容'),
                  ('follow', '用户关注内容'),
                  ('report', '用户举报内容'),
                  ('view', '用户浏览内容')
              ON CONFLICT (type_name) DO NOTHING;
              EOSQL
              
              echo "[OK] Forum tables created successfully!"
              
              echo ""
              echo "=========================================="
              echo "Initialization Complete!"
              echo "=========================================="
              echo "Listing all databases:"
              PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U gamevault_user -d postgres -c "\l"

          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD