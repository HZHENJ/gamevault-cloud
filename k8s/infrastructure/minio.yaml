---
# MinIO PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: gamevault
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: local-path

---
# MinIO Secret
apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: gamevault
type: Opaque
stringData:
  MINIO_ROOT_USER: minioadmin
  MINIO_ROOT_PASSWORD: minioadmin123  # Change this in production!

---
# MinIO Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: gamevault
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        args:
        - server
        - /data
        - --console-address
        - ":9001"
        ports:
        - containerPort: 9000
          name: api
        - containerPort: 9001
          name: console
        env:
        - name: TZ
          value: "Asia/Singapore"
        envFrom:
        - secretRef:
            name: minio-secret
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
# MinIO Service
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: gamevault
  labels:
    app: minio
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: api
  - port: 9001
    targetPort: 9001
    protocol: TCP
    name: console
  selector:
    app: minio

---
# 用于外部访问 MinIO API 和 Console
apiVersion: v1
kind: Service
metadata:
  name: minio-external
  namespace: gamevault
  labels:
    app: minio
spec:
  type: NodePort
  ports:
    - port: 9000
      targetPort: 9000
      nodePort: 30900
      protocol: TCP
      name: api
    - port: 9001
      targetPort: 9001
      nodePort: 30901
      protocol: TCP
      name: console
  selector:
    app: minio

---
# MinIO Init Job - Create buckets
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-init
  namespace: gamevault
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-minio
        image: busybox:latest
        command:
        - sh
        - -c
        - |
          until nc -z minio 9000; do
            echo "Waiting for MinIO..."
            sleep 5
          done
          echo "MinIO is ready!"
      containers:
      - name: mc
        image: minio/mc:latest
        envFrom:
        - secretRef:
            name: minio-secret
        command:
        - /bin/sh
        - -c
        - |
          echo "Configuring mc..."
          mc alias set myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD

          echo "Creating buckets..."
          mc mb --ignore-existing myminio/gamevault-images
          mc mb --ignore-existing myminio/gamevault-videos
          mc mb --ignore-existing myminio/gamevault-files
          mc mb --ignore-existing myminio/gamevault-audios
          mc mb --ignore-existing myminio/gamevault-chat

          echo "Setting bucket policies..."
          mc anonymous set download myminio/gamevault-images
          mc anonymous set download myminio/gamevault-videos
          mc anonymous set download myminio/gamevault-files
          mc anonymous set download myminio/gamevault-audios
          mc anonymous set download myminio/gamevault-chat

          echo "Configuring CORS for all buckets..."
          
          for bucket in gamevault-images gamevault-videos gamevault-files gamevault-audios gamevault-chat; do
            echo "Setting CORS for $bucket..."
            cat > /tmp/cors-${bucket}.json <<CORS_EOF
          {
            "CORSRules": [
              {
                "AllowedOrigins": ["*"],
                "AllowedMethods": ["GET", "HEAD", "PUT", "POST"],
                "AllowedHeaders": ["*"],
                "ExposeHeaders": ["ETag", "Content-Length"],
                "MaxAgeSeconds": 3600
              }
            ]
          }
          CORS_EOF
          
            mc anonymous set-json /tmp/cors-${bucket}.json myminio/${bucket} || echo "Warning: CORS config for ${bucket} failed"
          done
          
          echo "MinIO initialization complete!"
          echo "Listing all buckets:"
          mc ls myminio
          
          echo "Verifying CORS configuration:"
          mc anonymous get-json myminio/gamevault-images || echo "Could not retrieve CORS config"
